//Скрипт добавляет в CodeInspector анализ модуля с помощью Bsl-Language-Server
//На основе скрипта @ret-Phoenix https://github.com/ret-Phoenix/SmartConfigurator2/blob/dev/bin/scripts/BSL.os

//Инструкция!
//Скачайте bsl-language-server_win.zip из https://github.com/1c-syntax/bsl-language-server/releases
//Распакуйте в папку TurboConf в директорию bsl-language-server
//В окне CodeInspector включите опцию BSL

//Внимание этот файл будет перезаписан при следующем обновлении программы!
//Если вы хотите внести изменения в скрипт, переименуйте файл в BslServer.os и перезагрузите скрипты (Ctrl+Shift+R в конфигураторе)

Перем ТурбоКонф;

Процедура ОбработчикОтветаПользователя(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗапуститьПриложение("https://turboconf.ru/Forum/Details/1526#BslInstall");
	Иначе
		ТурбоКонф.CodeInspector(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаличиеBSLSever()
	
	ФайлАнализатора = Новый Файл(".\bsl-language-server\bsl-language-server.exe");
	
	Если НЕ ФайлАнализатора.Существует() Тогда
		
		ВопросПользователю = Новый ВопросПользователю(РежимДиалогаВопрос.ДаНетОтмена);

		ВопросПользователю.Заголовок = "TurboConf";
		ВопросПользователю.Текст = "Не найден анализатор: bsl-language-server.exe Перейти на turboconf.ru для скачивания?";
		ВопросПользователю.УстановитьОбработчик(ЭтотОбъект, "ОбработчикОтветаПользователя");
		ВопросПользователю.Параметры = ТекущаяДата(); //Необязательно

		ВопросПользователю.Показать();

		Возврат Ложь;

	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура ВыполнитьПроверку() Экспорт
	
	ТурбоКонф = Новый ТурбоКонф;

	Если НЕ ПроверитьНаличиеBSLSever() Тогда		
		Возврат;
	КонецЕсли;	
	
	ВременнаяПапка = ".\bsl-language-server\tmp";
  
	КаталогВременныхДанных = Новый Файл(ВременнаяПапка);
	Если НЕ КаталогВременныхДанных.Существует() Тогда
	  СоздатьКаталог(ВременнаяПапка);
	КонецЕсли;
	
	Поз = 0;
	ВыделенныйТекст = "";
	
	ТекстМодуля = ТурбоКонф.ПолучитьТекстМодуля(ВыделенныйТекст, Поз);
	
	ТекстМодуляКоллекция = СтрРазделить(ТекстМодуля, Символы.ПС, Истина);
	
	ИмяФайла = ".\bsl-language-server\tmp\module.bsl";
	ЗаписатьРезультатВФайл(ИмяФайла, ТекстМодуля);
	
	КодВозврата = 0;
	
	СтрокаЗапуска = ".\bsl-language-server\bsl-language-server.exe -a -s .\bsl-language-server\tmp --reporter=json -o .\bsl-language-server\tmp";
	
	ЗапуститьПриложение(СтрокаЗапуска, , Истина, КодВозврата);
	
	ПутьКФайлуОтчета = ".\bsl-language-server\tmp\bsl-json.json";
	
	ФайлОтчета = Новый Файл(ПутьКФайлуОтчета);
	
	Если НЕ ФайлОтчета.Существует() Тогда
		
		ТекстСообщения = "Анализ модуля не выполнен. Не найден файл отчета: " + ПутьКФайлуОтчета;
		
		Предупреждение = Новый ПредупреждениеПользователю();
		Предупреждение.Текст = ТекстСообщения;
		Предупреждение.Заголовок = "TurboConf";
		Предупреждение.Показать();
		
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлуОтчета, КодировкаТекста.UTF8);
	Результат = Неопределено;
	КоллекцияДиагностик(ЧтениеJSON, Результат);
	ЧтениеJSON.Закрыть();
	
	Стр = "";
	Для каждого КлючЗначение Из Результат Цикл
		Стр = Стр + "|" + КлючЗначение.Ключ;
	КонецЦикла;
	
	Диагностики = Результат.Получить("fileinfos")[0].Получить("diagnostics");
	
	Элементы = Новый Массив;
	
	Для каждого Диагностика Из Диагностики Цикл
		
		НомерСтроки = Диагностика.Получить("range").Получить("start").Получить("line") + 1;
		Описание = "" + НомерСтроки + " : " + Диагностика.Получить("message");
		
		ЭлементСписка = Новый Соответствие();
		ЭлементСписка.Вставить("Представление", Описание);
		ЭлементСписка.Вставить("НомерСтроки", НомерСтроки);
		
		Элементы.Добавить(ЭлементСписка);
		
	КонецЦикла;
	
	ТурбоКонф.CodeInspector(Элементы);
	
КонецПроцедуры

Процедура КоллекцияДиагностик(ЧтениеJSON, Дерево)
	
	ТипыЗначениеJSON = Новый Массив();
	ТипыЗначениеJSON.Добавить(ТипЗначенияJSON.Число);
	ТипыЗначениеJSON.Добавить(ТипЗначенияJSON.Строка);
	ТипыЗначениеJSON.Добавить(ТипЗначенияJSON.Булево);
	ТипыЗначениеJSON.Добавить(ТипЗначенияJSON.Null);
	
	ИмяСвойства = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		
		TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если TипJSON = ТипЗначенияJSON.НачалоОбъекта
			ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
			НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
			
			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
				Дерево.Добавить(НовыйОбъект);
			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
				Дерево.Вставить(ИмяСвойства, НовыйОбъект);
			КонецЕсли;
			
			КоллекцияДиагностик(ЧтениеJSON, НовыйОбъект);
			
			Если Дерево = Неопределено Тогда
				Дерево = НовыйОбъект;
			КонецЕсли;
		ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		ИначеЕсли ТипыЗначениеJSON.Найти(TипJSON) <> Неопределено Тогда
			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
				Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
				Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстИзФайла(ИмяФайла)
	
	ФайлОбмена = Новый Файл(ИмяФайла);
	Данные = "";
	Если ФайлОбмена.Существует() Тогда
		
		Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
		Данные = Текст.Прочитать();
		Текст.Закрыть();
		
		ОсвободитьОбъект(Текст);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Процедура ЗаписатьРезультатВФайл(ИмяФайла, Данные)
	
	Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	Текст.Записать(Данные);
	Текст.Закрыть();
	
	ОсвободитьОбъект(Текст);
	
КонецПроцедуры